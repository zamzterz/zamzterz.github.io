<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-04-06T18:18:58+02:00</updated><id>/feed.xml</id><title type="html">Samuel Gulliksson</title><entry><title type="html">Creating an Audio Player Component</title><link href="/tech/2022/04/06/custom-audio-player.html" rel="alternate" type="text/html" title="Creating an Audio Player Component" /><published>2022-04-06T00:00:00+02:00</published><updated>2022-04-06T00:00:00+02:00</updated><id>/tech/2022/04/06/custom-audio-player</id><content type="html" xml:base="/tech/2022/04/06/custom-audio-player.html">&lt;p&gt;One element of
“&lt;a href=&quot;/art/2022/02/01/transcendence.html&quot;&gt;Transcendence: A Visionary Truth&lt;/a&gt;”
is an audio clip (generated via speech synthesis).
To make it look nicer than the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;default controls&lt;/a&gt;
of each browser I created a very basic audio player with just a few lines of Javascript.&lt;/p&gt;

&lt;p&gt;The requirements were very basic:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it should be possible to pause and play the audio, and&lt;/li&gt;
  &lt;li&gt;it should show the progress of the audio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No need for volume controls or a fancy seek slider
(not only due to laziness, but actually part of the listening experience – it shouldn’t be possible to skip around in the audio).&lt;/p&gt;

&lt;p&gt;While figuring out how to do it I stumbled upon the excellent CSS-Tricks article
&lt;a href=&quot;https://css-tricks.com/lets-create-a-custom-audio-player/&quot;&gt;“Let’s Create a Custom Audio Player”&lt;/a&gt;.
Not only did it show how to create a custom audio player,
it also mentioned packaging it all up as a web component…
What a dream, reusable components finally becoming
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;a thing&lt;/a&gt;
for frontend development!&lt;/p&gt;

&lt;p&gt;Using the custom audio player is as simple as the following (but not really, see &lt;a href=&quot;#caveats&quot;&gt;below&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;player&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/audio-player&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and it looks like this:&lt;/p&gt;

&lt;audio-player src=&quot;https://www.soundboard.com/mediafiles/mz/Mzg1ODMxNTIzMzg1ODM3_JzthsfvUY24.MP3&quot;&gt;&lt;/audio-player&gt;

&lt;p&gt;The code can be found &lt;a href=&quot;/art/transcendence/lib/audio-player/audio-player.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some interesting features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The progress/duration text will have the same color as surrounding text since
&lt;a href=&quot;https://open-wc.org/guides/knowledge/styling/styles-piercing-shadow-dom/#styling-styles-piercing-shadow-dom&quot;&gt;shadow DOM inherits styles&lt;/a&gt; (which includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The color of the play/pause button can be styled separately via
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::part&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::part&lt;/code&gt;&lt;/a&gt; pseudo-element:
    &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;audio-player&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;::part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;playbutton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;
&lt;p&gt;The play button uses symbols defined in a custom font.
To make that work, the host page must include a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;font-face&lt;/code&gt; definition in its styling
(browser support for shadow trees containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@font-face&lt;/code&gt; is &lt;a href=&quot;https://wiki.csswg.org/spec/css-scoping&quot;&gt;very limited&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@font-face&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'fontello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url('fontello.woff2')&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'woff2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;sx&quot;&gt;url('fontello.woff')&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;style&gt;
@font-face {
    font-family: 'fontello';
    src: url('/art/transcendence/lib/icons/font/fontello.woff2?48840635 %}') format('woff2'),
         url('/art/transcendence/lib/icons/font/fontello.woff?48840635 %}')
}

audio-player::part(playbutton) {
  color: black;
}
&lt;/style&gt;

&lt;script type=&quot;module&quot; src=&quot;/art/transcendence/lib/audio-player/audio-player.js&quot;&gt;&lt;/script&gt;</content><author><name>Samuel Gulliksson</name></author><category term="tech" /><summary type="html">One element of “Transcendence: A Visionary Truth” is an audio clip (generated via speech synthesis). To make it look nicer than the default controls of each browser I created a very basic audio player with just a few lines of Javascript.</summary></entry><entry><title type="html">Visual Studio Code Extensions for Writing</title><link href="/tech/2022/04/04/vscode-extensions-for-writing.html" rel="alternate" type="text/html" title="Visual Studio Code Extensions for Writing" /><published>2022-04-04T00:00:00+02:00</published><updated>2022-04-04T00:00:00+02:00</updated><id>/tech/2022/04/04/vscode-extensions-for-writing</id><content type="html" xml:base="/tech/2022/04/04/vscode-extensions-for-writing.html">&lt;p&gt;Having delved deeper into the world of (creative) writing during the past year,
I had to incorporate some coding into my routine as well (to not got crazy).
As I ended up doing all my writing in VSCode,
and I’m not the only one
(&lt;a href=&quot;https://hackernoon.com/customizing-visual-studio-code-for-writing-2e6e621e069e&quot;&gt;1&lt;/a&gt;,
&lt;a href=&quot;https://levelup.gitconnected.com/turn-vs-code-into-the-perfect-writing-tool-a22a136e4360&quot;&gt;2&lt;/a&gt;,
&lt;a href=&quot;https://jay-penner.medium.com/writing-novels-and-non-fiction-with-visual-studio-code-6d6ccd1561a5&quot;&gt;3&lt;/a&gt;,
etc.),
it meant I could create some hopefully useful
&lt;a href=&quot;https://code.visualstudio.com/api&quot;&gt;extensions&lt;/a&gt;
for fun and profit.&lt;/p&gt;

&lt;p&gt;That’s how &lt;a href=&quot;https://github.com/zamzterz/vscode-writing-suite&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vscode-writing-suite&lt;/code&gt;&lt;/a&gt; was born.
It’s an umbrella project containing multiple independent VSCode extensions –
in the spirit of the Unix philosophy: “Make each program do one thing well.” –
intended to help when writing text (specifically tailored to my writing process, of course):&lt;/p&gt;

&lt;p&gt;First up is a simple Pomodoro timer with the addition of a word count tracker for the work time:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/zamzterz/vscode-writing-suite/tree/main/pomodoro-writer&quot;&gt;Pomodoro Writer&lt;/a&gt;
helps with hitting your word count goal by showing how many words you have left to write.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next is an outline visualizer that collates and displays the synopsis of a writing project:&lt;/p&gt;
&lt;blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/zamzterz/vscode-writing-suite/tree/main/outline-writer&quot;&gt;Outline Writer&lt;/a&gt;
provides an overview of the entire text, allowing to get a grasp of the structure at a glance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;small-note-on-the-use-of-a-monorepo&quot;&gt;Small note on the use of a monorepo&lt;/h2&gt;
&lt;p&gt;For no other reason than “code colocation”,
I opted to put the two different extensions in the same Github repository.&lt;/p&gt;

&lt;p&gt;Turns out using Github Actions makes it a breeze
to still have completely separate workflows for each extension,
only triggering the CI workflow for an extension
&lt;a href=&quot;https://github.com/zamzterz/vscode-writing-suite/blob/main/.github/workflows/ci-outline-writer.yml#L5-L14&quot;&gt;when files in that directory was changed&lt;/a&gt;.&lt;/p&gt;</content><author><name>Samuel Gulliksson</name></author><category term="tech" /><summary type="html">Having delved deeper into the world of (creative) writing during the past year, I had to incorporate some coding into my routine as well (to not got crazy). As I ended up doing all my writing in VSCode, and I’m not the only one (1, 2, 3, etc.), it meant I could create some hopefully useful extensions for fun and profit.</summary></entry><entry><title type="html">Jag skriver</title><link href="/text/2022/02/19/jag-skriver.html" rel="alternate" type="text/html" title="Jag skriver" /><published>2022-02-19T00:00:00+01:00</published><updated>2022-02-19T00:00:00+01:00</updated><id>/text/2022/02/19/jag-skriver</id><content type="html" xml:base="/text/2022/02/19/jag-skriver.html">&lt;p&gt;Med något stram stilistik &lt;br /&gt;
beaktar jag oftast ordens ballistik. &lt;br /&gt;
Jag bryr mig om hur orden flyger och landar, &lt;br /&gt;
inte så mycket om vad texten egentligen handlar.&lt;/p&gt;

&lt;p&gt;Jag älskar det annorlunda, alla bokstavslösa tecken, &lt;br /&gt;
alla semikolon, parenteser och de allra vackraste – tankstrecken! &lt;br /&gt;
Allt för att slippa komma, till punkten där inget mer blir sagt. &lt;br /&gt;
Jag river, jag svettas; det är faktiskt en ganska våldsam kärleksakt.&lt;/p&gt;

&lt;p&gt;Fylld med radbryt och psykbryt – ja, jag blir exalterad &lt;br /&gt;
när orden passar och jag framstår som välformulerad. &lt;br /&gt;
För min form är mitt jag, och här står den kort och koncis, &lt;br /&gt;
men kanske kommer den en dag bli vackrare och ännu mer precis.&lt;/p&gt;</content><author><name>Samuel Gulliksson</name></author><category term="text" /><summary type="html">Med något stram stilistik beaktar jag oftast ordens ballistik. Jag bryr mig om hur orden flyger och landar, inte så mycket om vad texten egentligen handlar.</summary></entry><entry><title type="html">Transcendence: Behind the scenes</title><link href="/tech/2022/02/10/transcendence.html" rel="alternate" type="text/html" title="Transcendence: Behind the scenes" /><published>2022-02-10T00:00:00+01:00</published><updated>2022-02-10T00:00:00+01:00</updated><id>/tech/2022/02/10/transcendence</id><content type="html" xml:base="/tech/2022/02/10/transcendence.html">&lt;p&gt;The &lt;a href=&quot;/art/2022/02/01/transcendence.html&quot;&gt;“Transcendence” project&lt;/a&gt;
was an exploration of applying technology to personal data in the form of face portrait images and recorded voice samples.
This post describes some of the tech used to build it.&lt;/p&gt;

&lt;h2 id=&quot;data-analysis&quot;&gt;Data analysis&lt;/h2&gt;
&lt;p&gt;The two different data sets — 1 set of images, 1 set of audio recordings — was processed using two libraries:
&lt;a href=&quot;https://github.com/justadudewhohacks/face-api.js/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face-api.js&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/peterkhayes/pitchfinder&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pitchfinder&lt;/code&gt;&lt;/a&gt; respectively.&lt;/p&gt;

&lt;p&gt;Turns out both operations could take noticeable time to complete (on the order of tens of seconds), given large enough input sizes.
In Chrome and Firefox this was not noticeable, but in Safari (as usual…) the UI would freeze and the pretty spinning loader would not actually be shown.
(Presumably because it &lt;a href=&quot;https://stackoverflow.com/a/66165276&quot;&gt;doesn’t repaint while being busy&lt;/a&gt; with the long running task?)&lt;/p&gt;

&lt;p&gt;To get around this I turned to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Workers&lt;/a&gt;,
trying to shift all that heavy computing out of the main thread.
Everything was a smooth ride for the audio processing.
Not so much for the face detection —
getting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;face-api.js&lt;/code&gt; to work in a Web Worker seemed to be an impossible task (or at least too time consuming for this simple proof-of-concept)
despite &lt;a href=&quot;https://github.com/justadudewhohacks/face-api.js/issues/47&quot;&gt;claims of working examples&lt;/a&gt;.
However, the basic (blocking) implementation is shown below.&lt;/p&gt;

&lt;p&gt;Supporting multi upload, a set of images can be analysed to detect any contained face and extract information about the identified features of the face (face landmarks), estimated age and gender:&lt;/p&gt;

&lt;iframe src=&quot;/code-examples/index.html?url=/code-examples/2022-02-10-transcendence/image-analysis&amp;amp;tab=js&quot; loading=&quot;lazy&quot; width=&quot;100%&quot; height=&quot;350&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Similarly, a pitch detection algorithm was applied to the audio recordings, which samples the audio data and returns the detected frequencies:&lt;/p&gt;

&lt;iframe src=&quot;/code-examples/index.html?url=/code-examples/2022-02-10-transcendence/audio-analysis&amp;amp;tab=js&quot; loading=&quot;lazy&quot; width=&quot;100%&quot; height=&quot;250&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;/code-examples/2022-02-10-transcendence/audio-analysis/frequencyDetector.js&quot;&gt;Web Worker code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; The results are printed in the Javascript console.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-visualization&quot;&gt;Data visualization&lt;/h2&gt;

&lt;p&gt;The extracted data was visualized using &lt;a href=&quot;https://www.chartjs.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chart.js&lt;/code&gt;&lt;/a&gt;.
Some of the noteworthy features utilized:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using a &lt;a href=&quot;(https://www.chartjs.org/docs/3.7.0/samples/advanced/linear-gradient.html)&quot;&gt;gradient as line color&lt;/a&gt; (used for visualizing the binary gender classifications).&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://www.chartjs.org/chartjs-plugin-annotation/latest/&quot;&gt;annotation plugin&lt;/a&gt; for drawing horizontal lines and boxes (used for example to show the average male and female voice ranges).&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://github.com/sgratzl/chartjs-chart-boxplot&quot;&gt;boxplot plugin&lt;/a&gt; for showing the five-number summary for a set of values (used for visualizing the voice frequency data).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;text-to-speech&quot;&gt;Text-to-speech&lt;/h2&gt;

&lt;p&gt;The poem
&lt;a href=&quot;/art/transcendence/data/not_my_voice.mp3&quot;&gt;“This is not my voice”&lt;/a&gt;
was rendered using &lt;a href=&quot;https://azure.microsoft.com/en-us/services/cognitive-services/text-to-speech/#overview&quot;&gt;Azure Text to Speech&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It has a nice variety of voices and offers a &lt;a href=&quot;https://speech.microsoft.com/audiocontentcreation&quot;&gt;graphical web interface&lt;/a&gt;
for editing the audio content (while also supporting raw &lt;a href=&quot;https://en.wikipedia.org/wiki/Speech_Synthesis_Markup_Language&quot;&gt;SSML&lt;/a&gt;).&lt;/p&gt;</content><author><name>Samuel Gulliksson</name></author><category term="tech" /><summary type="html">The “Transcendence” project was an exploration of applying technology to personal data in the form of face portrait images and recorded voice samples. This post describes some of the tech used to build it.</summary></entry><entry><title type="html">Transcendence: A Visionary Truth</title><link href="/art/2022/02/01/transcendence.html" rel="alternate" type="text/html" title="Transcendence: A Visionary Truth" /><published>2022-02-01T00:00:00+01:00</published><updated>2022-02-01T00:00:00+01:00</updated><id>/art/2022/02/01/transcendence</id><content type="html" xml:base="/art/2022/02/01/transcendence.html">&lt;p&gt;&lt;em&gt;Who and what are you when seen and rendered by a machine?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Machines can be trained to see, at least in the sense that they can detect objects in images and classify them.
A behavior not very unlike the very human reaction of instinctively assigning rigid labels to everything we sense.
And despite their crudeness (which often recreates prevalent prejudices and biases),
this “machine vision”, if you will, can provide a perspective on the self through the mechanical processing of data.
But what truth can lie in such simplistic classifications from a machine?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;/art/transcendence&quot;&gt;“Transcendence: A Visionary Truth”&lt;/a&gt;
is an illustrated text piece exploring and reflecting on what data can be extracted from a digitally documented transition process.
It also shows the empowering possibilities of recreating your perceived persona through technology —
using synthesized speech and animation — freeing the self from body and language.&lt;/em&gt;&lt;/p&gt;

&lt;style&gt;
    ul {
        margin-top: 0;
    }

    ul li {
        margin-bottom: 0;
    }

    .small-text {
        font-size: small;
    }
&lt;/style&gt;

&lt;div class=&quot;small-text&quot;&gt;
    Source data:
    &lt;ul&gt;
    &lt;li&gt;116 weekly portrait images of my face without glasses captured with mobile camera.&lt;/li&gt;
    &lt;li&gt;58 recurring (weekly and later monthly) voice recordings captured on mobile phone.&lt;/li&gt;
    &lt;/ul&gt;

    A description of the technology used to built this can be found &lt;a href=&quot;/tech/2022/02/10/transcendence.html&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;</content><author><name>Samuel Gulliksson</name></author><category term="art" /><summary type="html">Who and what are you when seen and rendered by a machine?</summary></entry><entry><title type="html">Droppar landar</title><link href="/text/2022/01/21/droppar-landar.html" rel="alternate" type="text/html" title="Droppar landar" /><published>2022-01-21T00:00:00+01:00</published><updated>2022-01-21T00:00:00+01:00</updated><id>/text/2022/01/21/droppar-landar</id><content type="html" xml:base="/text/2022/01/21/droppar-landar.html">&lt;p&gt;Droppar landar &lt;br /&gt;
i redan blöt jord. &lt;br /&gt;
En otörst &lt;br /&gt;
född av tvånget &lt;br /&gt;
i regnets hammare.&lt;/p&gt;

&lt;p&gt;Ingen säger stopp &lt;br /&gt;
det räcker &lt;br /&gt;
för de översvämmade &lt;br /&gt;
diken som drunknar. &lt;br /&gt;
                                                     Alla väntar på våren.&lt;/p&gt;</content><author><name>Samuel Gulliksson</name></author><category term="text" /><summary type="html">Droppar landar i redan blöt jord. En otörst född av tvånget i regnets hammare.</summary></entry><entry><title type="html">i det inre landet</title><link href="/text/2022/01/07/i-det-inre-landet.html" rel="alternate" type="text/html" title="i det inre landet" /><published>2022-01-07T00:00:00+01:00</published><updated>2022-01-07T00:00:00+01:00</updated><id>/text/2022/01/07/i-det-inre-landet</id><content type="html" xml:base="/text/2022/01/07/i-det-inre-landet.html">&lt;p&gt;i det inre landet &lt;br /&gt;
flyter älven förbi &lt;br /&gt;
det klara vattnet&lt;/p&gt;

&lt;p&gt;lämnar mig kall &lt;br /&gt;
med skälvande tänder &lt;br /&gt;
frusna händer&lt;/p&gt;

&lt;p&gt;vinkar vi skimrande &lt;br /&gt;
adjö till modern &lt;br /&gt;
som lämnat oss här&lt;/p&gt;</content><author><name>Samuel Gulliksson</name></author><category term="text" /><summary type="html">i det inre landet flyter älven förbi det klara vattnet</summary></entry><entry><title type="html">Preserving current page number with vscode-pdf</title><link href="/tech/2021/12/21/vscode-pdf.html" rel="alternate" type="text/html" title="Preserving current page number with vscode-pdf" /><published>2021-12-21T00:00:00+01:00</published><updated>2021-12-21T00:00:00+01:00</updated><id>/tech/2021/12/21/vscode-pdf</id><content type="html" xml:base="/tech/2021/12/21/vscode-pdf.html">&lt;p&gt;I’m using the VS Code extension
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf&quot;&gt;vscode-pdf&lt;/a&gt;,
which under the hood uses
&lt;a href=&quot;https://mozilla.github.io/pdf.js/&quot;&gt;PDF.js&lt;/a&gt;
to render PDF files in a Webview within VS Code.
After loading, the extension watches the opened PDF file for changes
and if it detects any it reloads the file.
This is a great feature, except as reported in a
&lt;a href=&quot;https://github.com/tomoki1207/vscode-pdfviewer/issues/118&quot;&gt;Github issue&lt;/a&gt;
it causes the PDF view to jump to the top of the file on reload.
This is not so great if you’re automatically (re)generating the PDF
from for example a Latex document and want to quickly be able to see your changes
(which is exactly what I do when editing my fiction writing).&lt;/p&gt;

&lt;p&gt;The underlying
&lt;a href=&quot;https://github.com/mozilla/pdf.js/issues/6847#issuecomment-451761859&quot;&gt;PDF.js library already handles this&lt;/a&gt;,
but it relies on detecting the page was reloaded
which doesn’t look to be possible with the current VSCode Webview API.
Instead I figured it should be possible to grab the current page number,
reload the PDF file, and then reset the page number to the previous value.
Turns out that did work, and a
&lt;a href=&quot;https://github.com/tomoki1207/vscode-pdfviewer/pull/121&quot;&gt;fix&lt;/a&gt;
was released in version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.0&lt;/code&gt; of vscode-pdf.&lt;/p&gt;</content><author><name>Samuel Gulliksson</name></author><category term="tech" /><category term="open-source" /><summary type="html">I’m using the VS Code extension vscode-pdf, which under the hood uses PDF.js to render PDF files in a Webview within VS Code. After loading, the extension watches the opened PDF file for changes and if it detects any it reloads the file. This is a great feature, except as reported in a Github issue it causes the PDF view to jump to the top of the file on reload. This is not so great if you’re automatically (re)generating the PDF from for example a Latex document and want to quickly be able to see your changes (which is exactly what I do when editing my fiction writing).</summary></entry><entry><title type="html">Avoid iframe navigation affecting browser history</title><link href="/tech/2021/12/21/indiepen-iframe-fix.html" rel="alternate" type="text/html" title="Avoid iframe navigation affecting browser history" /><published>2021-12-21T00:00:00+01:00</published><updated>2021-12-21T00:00:00+01:00</updated><id>/tech/2021/12/21/indiepen-iframe-fix</id><content type="html" xml:base="/tech/2021/12/21/indiepen-iframe-fix.html">&lt;p&gt;This blog uses
&lt;a href=&quot;/tech/2021/12/11/indiepen.html&quot;&gt;Indiepen for code examples&lt;/a&gt;.
It was working fine in Chrome,
but testing in Firefox showed something strange when navigating to &lt;a href=&quot;/tech/2021/12/01/moving-poetry.html&quot;&gt;this post&lt;/a&gt;:
clicking the back button didn’t seem to have any effect.
Not until after repeated clicks on the back button would the browser navigate back to a previous page.&lt;/p&gt;

&lt;p&gt;Turns out the embedded Indiepen iframe’s were to blame:
setting the iframe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; attribute will add an entry to the browser history,
and that’s exactly what Indiepen does to show the rendered result of a code example.
Since that particular blog posts contains multiple embedded Indiepen iframe’s
it required multiple clicks on the browser back button, one for each embedded iframe.&lt;/p&gt;

&lt;p&gt;The solution is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;frame&amp;gt;.contentWindow.location.replace(url)&lt;/code&gt;
instead of assigning directly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;frame&amp;gt;.src = url&lt;/code&gt;.
I’ve contributed &lt;a href=&quot;https://github.com/yetanother-blog/indiepen/pull/121&quot;&gt;a fix&lt;/a&gt;
which has been merged. 🎉&lt;/p&gt;</content><author><name>Samuel Gulliksson</name></author><category term="tech" /><category term="open-source" /><summary type="html">This blog uses Indiepen for code examples. It was working fine in Chrome, but testing in Firefox showed something strange when navigating to this post: clicking the back button didn’t seem to have any effect. Not until after repeated clicks on the back button would the browser navigate back to a previous page.</summary></entry><entry><title type="html">Using Indiepen for embedded code examples</title><link href="/tech/2021/12/11/indiepen.html" rel="alternate" type="text/html" title="Using Indiepen for embedded code examples" /><published>2021-12-11T00:00:00+01:00</published><updated>2021-12-11T00:00:00+01:00</updated><id>/tech/2021/12/11/indiepen</id><content type="html" xml:base="/tech/2021/12/11/indiepen.html">&lt;p&gt;While documenting the
&lt;a href=&quot;/tech/2021/12/01/moving-poetry.html&quot;&gt;technical details of the “Moving poetry” project&lt;/a&gt;
I needed to include structured code examples that would also be rendered to show the described results.
Many hosted alternatives exist,
like &lt;a href=&quot;https://codepen.io/&quot;&gt;Codepen&lt;/a&gt; and &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;,
but I wanted to host the files myself (to be able to version them same as the rest of this blog, etc.),
and not have to sign up for yet another service.&lt;/p&gt;

&lt;p&gt;That’s when I stumbled upon &lt;a href=&quot;https://indiepen.tech/&quot;&gt;Indiepen&lt;/a&gt;, which judging by its description
sounded like the perfect fit:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;An independent and privacy-friendly solution to present your code examples to the people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a quick look I found it to have a nice responsive design that looks great,
and the
&lt;a href=&quot;https://www.smashingmagazine.com/2021/08/cookieless-alternative-embed-html-css-js-code-examples/&quot;&gt;privacy-friendliness&lt;/a&gt;
is definitely something I’m all for!&lt;/p&gt;

&lt;p&gt;To use Indiepen, you simply need to host the code example files (HTML, CSS and JavaScript) somewhere
and provide the URL for Indiepen to present them together with a preview.
Only one problem: Indiepen is yet another hosted service that would introduce a dependency
as described in this &lt;a href=&quot;https://github.com/yetanother-blog/indiepen/issues/73&quot;&gt;Github issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since Indiepen is open source with a permissive MIT license I decided to see if I could
make a build of it that could be self-hosted on this blog.
What I ended up with was something even better: a self-contained single HTML file that can be hosted and included anywhere,
removing the need to host the full web service of Indiepen.&lt;/p&gt;

&lt;p&gt;The necessary changes to build such a file are described
&lt;a href=&quot;https://github.com/yetanother-blog/indiepen/issues/73#issuecomment-970080949&quot;&gt;here&lt;/a&gt;,
and the setup for this blog now includes a copy of the
&lt;a href=&quot;https://github.com/zamzterz/zamzterz.github.io/blob/ac43caa9d88c51128ce8fcc4e03685535fe12765/code-examples/index.html&quot;&gt;Indiepen HTML file&lt;/a&gt;.
For example in the &lt;a href=&quot;/tech/2021/12/01/moving-poetry.html#opacity&quot;&gt;“Moving poetry” post&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/code-examples/index.html?url=/code-examples/2021-12-01-moving-poetry/opacity/basic&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loading=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lazy&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;250&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which renders as&lt;/p&gt;
&lt;iframe src=&quot;/code-examples/index.html?url=/code-examples/2021-12-01-moving-poetry/opacity/basic&quot; loading=&quot;lazy&quot; width=&quot;100%&quot; height=&quot;250&quot;&gt;&lt;/iframe&gt;</content><author><name>Samuel Gulliksson</name></author><category term="tech" /><category term="open-source" /><summary type="html">While documenting the technical details of the “Moving poetry” project I needed to include structured code examples that would also be rendered to show the described results. Many hosted alternatives exist, like Codepen and JSFiddle, but I wanted to host the files myself (to be able to version them same as the rest of this blog, etc.), and not have to sign up for yet another service.</summary></entry></feed>